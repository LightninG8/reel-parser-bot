import { Router, Request, Response } from 'express';
import { apifyService, salebotService, sheetService } from '../services';
import { logger } from '../utils';

const parseRouter = Router();

parseRouter.post('/parse', async (req: Request, res: Response) => {
    let usernames = req.body['usernames'];
    const clientId = +req.body['clientId'];
    const limit = +req.body['limit'];

    if (typeof usernames === 'string') {
        usernames = JSON.parse(usernames);
    }

    if (!Array.isArray(usernames) || usernames.length === 0) {
        return res.status(400).json({ error: 'Invalid request: usernames[] –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    if (!clientId) {
        return res.status(400).json({ error: 'Invalid request: clientId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    try {
        const flow = async () => {
            const reels = await apifyService.runActor(apifyService.configureReelScrapper(usernames, limit));

            const CONCURRENCY_LIMIT = 16;
            let index = 0;
            let completed = 0;
            let successCount = 0;
            let failCount = 0;

            const total = reels.length;
            const results: any[] = [];

            logger.info(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${total} —Ä–∏–ª–æ–≤ (–¥–æ ${CONCURRENCY_LIMIT} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)...`);

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            async function runNext() {
                if (index >= reels.length) return;

                const reel = reels[index++];
                const currentIndex = index;

                logger.info(`üé¨ [${currentIndex}/${total}] –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${reel.code}...`);

                try {
                    const result = await apifyService.runActor(apifyService.configureReelTranscript(`https://instagram.com/p/${reel.code}`));

                    const text = (result as any)?.result?.text ?? '';
                    successCount++;

                    results.push({ ...reel, transcript: text });

                    logger.info(`‚úÖ [${currentIndex}/${total}] –ì–æ—Ç–æ–≤–æ (${((completed / total) * 100).toFixed(1)}%) ‚Äî ${reel.code}`);
                    if (text) {
                        logger.info(`üó£Ô∏è –ü—Ä–∏–º–µ—Ä: ${text.slice(0, 60).replace(/\n/g, ' ')}...`);
                    }
                } catch (err: any) {
                    failCount++;
                    logger.error(`‚ùå [${currentIndex}/${total}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${reel.code}:`, err.message);
                    results.push({ ...reel, transcript: null });
                }

                completed++;
                const percent = ((completed / total) * 100).toFixed(1);
                logger.info(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${completed}/${total} (${percent}%) | ‚úÖ ${successCount} | ‚ùå ${failCount}`);

                // –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                await runNext();
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞–∫—Å–∏–º—É–º N –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            const workers = Array(CONCURRENCY_LIMIT).fill(null).map(runNext);
            await Promise.all(workers);

            // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            logger.info('\nüéâ –í—Å–µ —Ä–∏–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
            logger.info(`üì¶ –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${failCount}`);
            logger.info('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ dataset_with_transcripts.json');

            const sheetUrl = await sheetService.createCsv(reels, `./public/${clientId}/${new Date().getTime()}/–†–µ–∑—É–ª—å—Ç–∞—Ç—ã.csv`);

            await salebotService.sendParsingSuccessWebhook(clientId, sheetUrl, reels.length);
        };

        flow();

        res.status(200).json({ status: 'Parsing started' });
    } catch (err) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:', err);
        await salebotService.sendServerErrorWebhook(clientId);
        res.status(500).json({ error: 'Failed to start parsing', message: err });
    }
});

export default parseRouter;
