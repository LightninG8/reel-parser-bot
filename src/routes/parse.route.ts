import { Router, Request, Response } from 'express';
import { apifyService, salebotService, sheetService } from '../services';
import { logger } from '../utils';

const parseRouter = Router();

parseRouter.post('/parse', async (req: Request, res: Response) => {
    const username = req.body['username'];
    const clientId = +req.body['clientId'];

    if (!Array.isArray(username) || username.length === 0) {
        return res.status(400).json({ error: 'Invalid request: username[] –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    if (!clientId) {
        return res.status(400).json({ error: 'Invalid request: clientId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    try {
        const flow = async () => {
            logger.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤...');

            const reels = await apifyService.runActor(apifyService.configureReelScrapper(username));

            // –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            // const filtered = reels.filter((r: any) => (r.commentsCount || 0) >= 100);
            const filtered = reels;
            logger.log(`üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filtered.length} –≤–∏–¥–µ–æ`);

            const enriched = await Promise.all(
                filtered.map(async (video: any) => {
                    try {
                        const transcript = await apifyService.runActor(apifyService.configureReelTranscript(video.url));

                        // –µ—Å–ª–∏ –∞–∫—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                        const text = (transcript as any)?.[0]?.result?.text ?? '';
                        return { ...video, transcript: text };
                    } catch (error) {
                        // –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                        logger.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ ${video.url}:`, error);
                        return { ...video, transcript: '' }; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –ø–æ–ª—è transcript
                    }
                })
            );

            const sheetUrl = await sheetService.createCsv(enriched, `./public/${clientId}/–†–µ–∑—É–ª—å—Ç–∞—Ç—ã.csv`);

            await salebotService.sendParsingSuccessWebhook(clientId, sheetUrl, enriched.length);
        };

        flow();

        res.status(200).json({ status: 'Parsing started' });
    } catch (err) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:', err);
        await salebotService.sendServerErrorWebhook(clientId);
        res.status(500).json({ error: 'Failed to start parsing', message: err });
    }
});

export default parseRouter;
