import { Router, Request, Response } from 'express';
import { apifyService, salebotService, sheetService } from '../services';
import { logger } from '../utils';

const parseRouter = Router();

parseRouter.post('/parse', async (req: Request, res: Response) => {
    let usernames = req.body['usernames'];
    const clientId = +req.body['clientId'];
    const limit = +req.body['limit'];

    if (typeof usernames === 'string') {
        usernames = JSON.parse(usernames);
    }

    if (!Array.isArray(usernames) || usernames.length === 0) {
        return res.status(400).json({ error: 'Invalid request: usernames[] –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    if (!clientId) {
        return res.status(400).json({ error: 'Invalid request: clientId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    try {
        const flow = async () => {
            logger.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤...');

            const reelsArray = await Promise.all(
                usernames.map(async (username) => {
                    // –§–æ—Ä–º–∏—Ä—É–µ–º input –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const actorInput = apifyService.configureReelScrapper([username], limit);

                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä
                    const result = await apifyService.runActor(actorInput, clientId);

                    // –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    const filtered = result.filter((r: any) => (r.commentsCount || 0) >= 100) as any[];

                    // –í—ã–∑—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await salebotService.sendParsingProgressWebhook(clientId, filtered.length, username);

                    return filtered;
                })
            );

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
            const reels = reelsArray.flat();

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
            const sortedReels = reels.sort((a, b) => b.videoPlayCount - a.videoPlayCount);

            logger.log(`üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${sortedReels.length} –≤–∏–¥–µ–æ`);

            const enriched = await Promise.all(
                reels.map(async (video: any) => {
                    try {
                        const transcript = await apifyService.runActor(apifyService.configureReelTranscript(video.url), clientId);

                        // –µ—Å–ª–∏ –∞–∫—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                        const text = (transcript as any)?.[0]?.result?.text ?? '';
                        return { ...video, transcript: text };
                    } catch (error) {
                        // –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                        logger.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ ${video.url}:`, error);
                        return { ...video, transcript: '' }; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –ø–æ–ª—è transcript
                    }
                })
            );

            const sheetUrl = await sheetService.createCsv(enriched, `./public/${clientId}/–†–µ–∑—É–ª—å—Ç–∞—Ç—ã.csv`);

            await salebotService.sendParsingSuccessWebhook(clientId, sheetUrl, enriched.length);
        };

        flow();

        res.status(200).json({ status: 'Parsing started' });
    } catch (err) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:', err);
        await salebotService.sendServerErrorWebhook(clientId);
        res.status(500).json({ error: 'Failed to start parsing', message: err });
    }
});

export default parseRouter;
